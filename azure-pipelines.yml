# Deploy to Azure Kubernetes Service
# Build and push image to Azure Container Registry; Deploy to Azure Kubernetes Service
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

trigger:
- main

resources:
- repo: self

variables:

  # Container registry service connection established during pipeline creation
  dockerRegistryServiceConnection: '8b6a5708-a419-4c9b-b771-541c4b5ada84'
  imageRepository: 'amitknitrundevops'
  containerRegistry: 'shoppingacr5411.azurecr.io'
  dockerfilePath: '**/Dockerfile'
  tag: '$(Build.BuildId)'
  imagePullSecret: 'shoppingacr5411dcf1-auth'

  # Agent VM image name
  vmImageName: 'ubuntu-latest'

stages:
- stage: Build
  displayName: Build stage
  jobs:
  - job: Build
    displayName: Build
    pool:
      name: Default
    steps:
    # ðŸ‘‰ SonarQube - Prepare
    - task: SonarQubePrepare@5
      inputs:
        SonarQube: 'MySonarQubeServiceConnection'   # <-- Service connection to SonarQube
        scannerMode: 'MSBuild'
        projectKey: 'ShoppingService'               # <-- Replace with your project key
        projectName: 'Shopping Microservice'        # <-- Replace with your project name

    # ðŸ‘‰ Build the .NET Core solution (required before analysis)
    - task: DotNetCoreCLI@2
      displayName: 'Build .NET Core solution'
      inputs:
        command: 'build'
        projects: '**/*.csproj'

    # ðŸ‘‰ SonarQube - Analyze
    - task: SonarQubeAnalyze@5

    # ðŸ‘‰ SonarQube - Publish Results
    - task: SonarQubePublish@5
      inputs:
        pollingTimeoutSec: '300'

    # Docker build & push
    - task: Docker@2
      displayName: Build and push an image to container registry
      inputs:
        command: buildAndPush
        repository: $(imageRepository)
        dockerfile: $(dockerfilePath)
        containerRegistry: $(dockerRegistryServiceConnection)
        buildContext: $(Build.SourcesDirectory)/Shopping
        tags: |
          $(tag)

    - upload: manifests
      artifact: manifests

- stage: Deploy
  displayName: Deploy stage
  dependsOn: Build

  jobs:
  - deployment: Deploy
    displayName: Deploy
    pool:
      name: Default
    environment: 'amitknit09rundevops.default'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: KubernetesManifest@0
            displayName: Create imagePullSecret
            inputs:
              action: createSecret
              secretName: $(imagePullSecret)
              dockerRegistryEndpoint: $(dockerRegistryServiceConnection)

          - task: KubernetesManifest@0
            displayName: Deploy to Kubernetes cluster
            inputs:
              action: deploy
              manifests: |                
                $(Pipeline.Workspace)/manifests/shopping.yaml
              imagePullSecrets: |
                $(imagePullSecret)
              containers: |
                $(containerRegistry)/$(imageRepository):$(tag)
