# Deploy to Azure Kubernetes Service
# Build and push image to Azure Container Registry; Deploy to AKS
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

trigger:
- main

resources:
- repo: self

variables:
  # Container registry service connection
  dockerRegistryServiceConnection: '8b6a5708-a419-4c9b-b771-541c4b5ada84'
  imageRepository: 'amitknitrundevops'
  containerRegistry: 'shoppingacr5411.azurecr.io'
  dockerfilePath: '**/Dockerfile'
  tag: '$(Build.BuildId)'
  imagePullSecret: 'shoppingacr5411dcf1-auth'

  # Agent VM image
  vmImageName: 'ubuntu-latest'

stages:
- stage: Build
  displayName: Build stage
  jobs:
  - job: Build
    displayName: Build and Analyze
    pool:
      name: Default   # ✅ use Microsoft-hosted agent unless you must use self-hosted
    steps:
    # --- SonarQube Prepare ---
    - task: SonarQubePrepare@5
      inputs:
        SonarQube: 'SonarQube-Server'   # <-- Update with your service connection
        scannerMode: 'MSBuild'
        projectKey: 'ShoppingApp_ShoppingApp_aa1d6fd2'               # <-- Update with your SonarQube project key
        projectName: 'Shopping Microservice'
        extraProperties: |
          sonar.branch.name=

    # --- Restore NuGet packages ---
    - task: DotNetCoreCLI@2
      displayName: 'Restore .NET dependencies'
      inputs:
        command: 'restore'
        projects: '**/*.csproj'

    # --- Build solution ---
    - task: DotNetCoreCLI@2
      displayName: 'Build .NET Core solution'
      inputs:
        command: 'build'
        projects: '**/*.csproj'
        arguments: '--configuration Release'

    # --- SonarQube Analyze ---
    - task: SonarQubeAnalyze@5

    # --- SonarQube Publish ---
    - task: SonarQubePublish@5
      inputs:
        pollingTimeoutSec: '300'

    # --- Docker build & push ---
    - task: Docker@2
      displayName: Build and push image to ACR
      inputs:
        command: buildAndPush
        repository: $(imageRepository)
        dockerfile: $(dockerfilePath)
        containerRegistry: $(dockerRegistryServiceConnection)
        buildContext: $(Build.SourcesDirectory)   # ✅ root of repo; adjust if needed
        tags: |
          $(tag)

    - publish: manifests
      artifact: manifests

- stage: Deploy
  displayName: Deploy stage
  dependsOn: Build

  jobs:
  - deployment: Deploy
    displayName: Deploy to AKS
    pool:
      name: Default
    environment: 'amitknit09rundevops.default'
    strategy:
      runOnce:
        deploy:
          steps:
          # --- Create imagePullSecret ---
          - task: KubernetesManifest@0
            displayName: Create imagePullSecret
            inputs:
              action: createSecret
              secretName: $(imagePullSecret)
              dockerRegistryEndpoint: $(dockerRegistryServiceConnection)

          # --- Deploy manifests ---
          - task: KubernetesManifest@0
            displayName: Deploy to AKS
            inputs:
              action: deploy
              manifests: |
                $(Pipeline.Workspace)/manifests/shopping.yaml
              imagePullSecrets: |
                $(imagePullSecret)
              containers: |
                $(containerRegistry)/$(imageRepository):$(tag)
